{
  "contractName": "ChromiumV2",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"/Users/christianroque/Desktop/TungstenGroupProject/contracts/ChromiumV2.sol\":\"ChromiumV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/christianroque/Desktop/TungstenGroupProject/contracts/ChromiumV2.sol\":{\"keccak256\":\"0xebbf6137f778d2bf78a14bd5333e6349e3202e4ee13b42a811d2811f828e2b6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4da8f167a107fbb2ebca110472e559f6abdba7bc1e591d1477d04efc68b45b52\",\"dweb:/ipfs/QmUySadWWMzsRVuMu4u9ZFyatLpmWigLp8m4cRq4jRp9fa\"]},\"/Users/christianroque/Desktop/TungstenGroupProject/contracts/ExchangeOracle.sol\":{\"keccak256\":\"0xbddba0d3dc452941fd8ca2c71f8958bcd62da529c098a628d1c44c092e8616d8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://72e3d2db00c438e8e93b501ccca93748b19173d888591c18c3459623be0b5786\",\"dweb:/ipfs/QmX7rwzK2XFchpVWFAtsbBYzouhFcekzSjs8RqUUo95s2E\"]},\"/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/Address.sol\":{\"keccak256\":\"0xb64b640e91314976fa92660a6b5d65bed1fe7332cf4fbbfb29cdaced04f304d7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://05511d7c1d70f7f2d352ed4cf9613db18bb268d6d9326bbdedfd531c30048ebf\",\"dweb:/ipfs/QmVBaWVTVqqiG97noFE9a1ZviYGU4QDHc7EEKdEbGn8gcB\"]},\"/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x7e4d6ed8db8dd19430f870334db63d06d67164266847eca32ef418e28163cc0c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5b13e67ae36457e081cb9a30b21f141eefd6cd724049b2b750d171eae27239ec\",\"dweb:/ipfs/Qmeni2imk8M6zWdrUUtjLABnTFC2eLdERHSz5YhjU2MDY1\"]},\"/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/IUniswap.sol\":{\"keccak256\":\"0xf107b120f2fd71d601838198f9c4ae23bfa6bea8a93d7ee393e4990e051a6724\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d2a70382b6d2b60f11d46435bdede6b869eb905ad9f2dc8a894eaec37af3814d\",\"dweb:/ipfs/Qme719jipRfqViW3XAaZMKTxq61hsiGg8xRmd4YBkEr968\"]},\"/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/Ownable.sol\":{\"keccak256\":\"0x5086bbbeff67771c169d3bb3133c9e8d52a2569e88f0cf813a67aa420f15f7eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fe1c2576dd591e776f735aa0b91f7828dcf12d5e543cdaf218cc8c52ea06a3f5\",\"dweb:/ipfs/QmZ5a2sJahH4G5K2u75fv1KVwZbBubAqj76zTNZ5sVjDR9\"]},\"/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/SafeERC20.sol\":{\"keccak256\":\"0xb17a3575373a9c5f590206ae6744cce36efd819e580ffd049b08ac7c25ddd0f1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7c8a2ffb4d698691d7df5ff59a87d7cf9b300825644435fc6d3cccc8da079d65\",\"dweb:/ipfs/QmXzV71vZ3tdYym6HpiJHxGrzGTfWJP6h3i7pEmDqB7fYM\"]},\"/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/SafeMath.sol\":{\"keccak256\":\"0x421152e51aa1eb260827c4ff2aa45070a819484b4995c9498202a98a697cd364\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30eba6d6c93dfd77b08f1a070ed07c5104688f49ed8236ccc0059c53a2d4c3da\",\"dweb:/ipfs/Qmb7juVfTtsbUb7GhjrdSBiaj8vvRnEHF3h6pj55UNZsH8\"]},\"/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/UniversalERC20.sol\":{\"keccak256\":\"0x3672a4793fb8653c0be00267fee8459828132943e54004fa50c3ba18f86e2aa7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7f0e255e475acbaa1a3203c900156f017396ffa4172612155fd19281a22ca9db\",\"dweb:/ipfs/QmQVA9niG1F6gcuhfLETTXDQfrAAfnDTSHnU8o7TyUA3Vb\"]}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506102ca806100606000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638f32d59b14610046578063b2bdfa7b14610066578063f2fde38b1461009a575b600080fd5b61004e6100de565b60405180821515815260200191505060405180910390f35b61006e610135565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100dc600480360360208110156100b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610159565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101616100de565b6101d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f596f7520617265206e6f7420746865206f776e65722e0000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561020d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a25056fea2646970667358221220f15fbffad10f429e67bf327b1ba25b7590846c994a0cde2cf8a5ddb0c9e0c5ab64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80638f32d59b14610046578063b2bdfa7b14610066578063f2fde38b1461009a575b600080fd5b61004e6100de565b60405180821515815260200191505060405180910390f35b61006e610135565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6100dc600480360360208110156100b057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610159565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101616100de565b6101d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f596f7520617265206e6f7420746865206f776e65722e0000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561020d57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a25056fea2646970667358221220f15fbffad10f429e67bf327b1ba25b7590846c994a0cde2cf8a5ddb0c9e0c5ab64736f6c63430007060033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "211:9886:1:-:0;;;;;;;;;;;;;304:10:17;295:6;;:19;;;;;;;;;;;;;;;;;;211:9886:1;;;;;;",
  "deployedSourceMap": "211:9886:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;426:92:17;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;158:21;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;524:166;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;426:92;466:4;504:6;;;;;;;;;;;490:20;;:10;:20;;;482:29;;426:92;:::o;158:21::-;;;;;;;;;;;;:::o;524:166::-;366:9;:7;:9::i;:::-;358:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;626:1:::1;605:23;;:9;:23;;;;597:32;;;::::0;::::1;;673:9;644:39;;;665:6;::::0;::::1;;;;;;;;644:39;;;;;;;;;;;;;;;;;;;;524:166:::0;:::o",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport \"./interfaces/UniversalERC20.sol\";\nimport \"./interfaces/Ownable.sol\";\nimport \"./interfaces/IUniswap.sol\";\nimport \"./ExchangeOracle.sol\";\n\ncontract ChromiumV2 is Ownable {\n    // using UniversalERC20 for IERC20;\n    // // used to keep track of tokens in contract\n    // mapping(uint256 => uint256) public cbltLiquidity;\n    // uint256 cbltLiquidityMaxAmount;\n    // // eth contract address\n    // IERC20 private constant ETH_ADDRESS =\n    //     IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n    // IUniswap private constant uniswap =\n    //     IUniswap(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n    // // initializing objects\n    // IERC20 cbltToken;\n    // ExchangeOracle oracle;\n    // // emits when chromium is used\n    // event ChromiumTrade(\n    //     address indexed _from,\n    //     address _fromToken,\n    //     address _destToken,\n    //     uint256 _fromAmount,\n    //     uint256 _cbltAmount\n    // );\n    // /**\n    //  * pass in the oracle contract so that it can pull info from it\n    //  */\n    // constructor(\n    //     address _cbltToken,\n    //     address _oracle,\n    //     uint256 _liquidityCbltPoolAmount\n    // ) {\n    //     cbltToken = IERC20(_cbltToken);\n    //     oracle = ExchangeOracle(_oracle);\n    //     cbltLiquidityMaxAmount = _liquidityCbltPoolAmount;\n    // }\n    // // sets CBLT token  // only devs\n    // function setCbltToken(address _cblt) external {\n    //     cbltToken = IERC20(_cblt);\n    // }\n    // // only devs\n    // function setOracle(address _oracle) external {\n    //     oracle = ExchangeOracle(_oracle);\n    // }\n    // // only devs\n    // function changeCbltLiquidityLimit(uint256 _liquidityLimit) external {\n    //     cbltLiquidityMaxAmount = _liquidityLimit;\n    // }\n    // /************ chromium functions ************/\n    // function getExchangeRate() public view returns (uint256) {\n    //     (uint256 sellTokenValue, uint256 buyTokenValue, bool success) =\n    //         oracle.priceOfPair(path[0], path[1]);\n    //     if (success) {\n    //         amounts = new uint256[](path.length);\n    //         amounts[0] = amountIn;\n    //         amountIn = SafeMath.sub(\n    //             amountIn,\n    //             SafeMath.mul(amountIn, SafeMath.div(3, 1000))\n    //         );\n    //         uint256 returnAmount =\n    //             SafeMath.mul(\n    //                 amountIn,\n    //                 SafeMath.findRate(sellTokenValue, buyTokenValue)\n    //             );\n    //         amounts[1] = returnAmount;\n    //     } else {\n    //         amountIn = SafeMath.sub(\n    //             amountIn,\n    //             SafeMath.mul(amountIn, SafeMath.div(3, 1000))\n    //         );\n    //         amounts = uniswap.getAmountsOut(amountIn, path);\n    //     }\n    // }\n    // /**\n    //  * @dev this function will swap cblt tokens for tokens that are allowed\n    //  */\n    // function swapTokens(address[] calldata path, uint256 amount)\n    //     external\n    //     payable\n    //     returns (uint256)\n    // {\n    //     require(\n    //         path[0] != address(cbltToken) && path[1] != address(cbltToken),\n    //         \"Cblt can't be traded with this function\"\n    //     );\n    //     uint256[] memory amounts = getExchangeRate(amount, path);\n    //     if (IERC20(path[0]) == ETH_ADDRESS) {\n    //         require(msg.value != 0, \"Chromium:: msg.value can not equal 0\");\n    //         require(\n    //             tokenLiquidity[path[1]] >= amounts[1],\n    //             \"Not enough tokens in Treasury.\"\n    //         );\n    //         IERC20(path[0]).universalTransferFromSenderToThis(amount);\n    //         tokenLiquidity[path[0]] = SafeMath.add(\n    //             tokenLiquidity[path[0]],\n    //             amount\n    //         );\n    //         IERC20(path[1]).universalTransfer(msg.sender, amounts[1]);\n    //         tokenLiquidity[path[1]] = SafeMath.sub(\n    //             tokenLiquidity[path[1]],\n    //             amounts[1]\n    //         );\n    //         emit ChromiumTrade(\n    //             msg.sender,\n    //             path[0],\n    //             path[1],\n    //             amount,\n    //             amounts[1]\n    //         );\n    //         return amounts[1];\n    //     } else {\n    //         require(\n    //             tokenLiquidity[path[1]] >= amounts[1],\n    //             \"Chromium:: Not enough tokens in Treasury.\"\n    //         );\n    //         IERC20(path[0]).universalTransferFromSenderToThis(amount);\n    //         tokenLiquidity[path[0]] = SafeMath.add(\n    //             tokenLiquidity[path[0]],\n    //             amount\n    //         );\n    //         IERC20(path[1]).universalTransfer(msg.sender, amounts[1]);\n    //         emit ChromiumTrade(\n    //             msg.sender,\n    //             path[0],\n    //             path[1],\n    //             amount,\n    //             amounts[1]\n    //         );\n    //         return amounts[1];\n    //     }\n    // }\n    // function swapCblt(address[] calldata path, uint256 amount)\n    //     external\n    //     payable\n    //     returns (uint256)\n    // {\n    //     require(\n    //         path[0] == address(cbltToken),\n    //         \"Chromium:: fromToken needs to be cbltToken.\"\n    //     );\n    //     uint256[] memory amounts = getExchangeRate(amount, path);\n    //     require(\n    //         tokenLiquidity[path[1]] >= amounts[1],\n    //         \"Not enough tokens in treasury.\"\n    //     );\n    //     cbltToken.universalTransferFromSenderToThis(amount);\n    //     uint256 temp = getCbltPool(amount);\n    //     cbltLiquidity[temp] = SafeMath.add(cbltLiquidity[temp], amount);\n    //     IERC20(path[1]).universalTransfer(msg.sender, amounts[1]);\n    //     tokenLiquidity[path[1]] = SafeMath.sub(\n    //         tokenLiquidity[path[1]],\n    //         amounts[1]\n    //     );\n    //     emit ChromiumTrade(msg.sender, path[0], path[1], amount, amounts[1]);\n    //     return amounts[1];\n    // }\n    // function swapForCblt(address[] calldata path, uint256 amount)\n    //     external\n    //     payable\n    //     returns (uint256)\n    // {\n    //     require(\n    //         path[1] == address(cbltToken),\n    //         \"Chromium:: destToken needs to be cbltToken.\"\n    //     );\n    //     uint256[] memory amounts = getExchangeRate(amount, path);\n    //     uint256 temp = getCbltPool(amounts[1]);\n    //     if (IERC20(path[0]) == ETH_ADDRESS) {\n    //         require(msg.value != 0, \"Chromium:: msg.value can not equal 0\");\n    //         require(\n    //             cbltLiquidity[temp] >= amounts[1],\n    //             \"Not enough cblt tokens in pool for 1000 and up in Treasury.\"\n    //         );\n    //         IERC20(path[0]).universalTransferFromSenderToThis(amount);\n    //         tokenLiquidity[path[0]] = SafeMath.add(\n    //             tokenLiquidity[path[0]],\n    //             amount\n    //         );\n    //         cbltLiquidity[temp] = SafeMath.sub(cbltLiquidity[temp], amounts[1]);\n    //         cbltToken.universalTransfer(msg.sender, amounts[1]);\n    //         emit ChromiumTrade(\n    //             msg.sender,\n    //             path[0],\n    //             path[1],\n    //             amount,\n    //             amounts[1]\n    //         );\n    //         return amounts[1];\n    //     } else {\n    //         require(\n    //             cbltLiquidity[temp] >= amounts[1],\n    //             \"Not enough cblt tokens in pool for 1000 and down in Treasury.\"\n    //         );\n    //         IERC20(path[0]).universalTransferFromSenderToThis(amount);\n    //         tokenLiquidity[path[0]] = SafeMath.add(\n    //             tokenLiquidity[path[0]],\n    //             amount\n    //         );\n    //         cbltLiquidity[temp] = SafeMath.sub(cbltLiquidity[temp], amounts[1]);\n    //         cbltToken.universalTransfer(msg.sender, amounts[1]);\n    //         emit ChromiumTrade(\n    //             msg.sender,\n    //             path[0],\n    //             path[1],\n    //             amount,\n    //             amounts[1]\n    //         );\n    //         return amounts[1];\n    //     }\n    // }\n    // function addCbltToPool(uint256 _poolNumber, uint256 _amount)\n    //     external\n    //     onlyOwner\n    // {\n    //     cbltToken.universalTransferFromSenderToThis(_amount);\n    //     cbltLiquidity[_poolNumber] = SafeMath.add(\n    //         cbltLiquidity[_poolNumber],\n    //         _amount\n    //     );\n    // }\n    // function addNewTokenToPool(address _token, uint256 _amount) external {\n    //     IERC20(_token).universalTransferFromSenderToThis(_amount);\n    //     tokenLiquidity[_token] = SafeMath.add(tokenLiquidity[_token], _amount);\n    //     tokenApproval[_token] = TokenInfo(false, false);\n    // }\n    // function retrieveTokens(IERC20 _token, uint256 amount) external onlyOwner {\n    //     require(\n    //         cbltToken != _token,\n    //         \"Chromium:: can't withdraw CBLT with this function.\"\n    //     );\n    //     require(\n    //         amount <= tokenLiquidity[address(_token)],\n    //         \"Chromium:: not enough tokens in exchange.\"\n    //     );\n    //     _token.universalTransfer(msg.sender, amount);\n    //     tokenLiquidity[address(_token)] = SafeMath.sub(\n    //         tokenLiquidity[address(_token)],\n    //         amount\n    //     );\n    // }\n    // function retrieveCBLT(uint256 liquidityPool, uint256 amount)\n    //     external\n    //     onlyOwner\n    // {\n    //     require(\n    //         amount <= cbltLiquidity[liquidityPool],\n    //         \"Chromium:: not enough CBLT in this liquidity pool.\"\n    //     );\n    //     cbltToken.universalTransfer(msg.sender, amount);\n    //     cbltLiquidity[liquidityPool] = SafeMath.sub(\n    //         cbltLiquidity[liquidityPool],\n    //         amount\n    //     );\n    // }\n    // function getCbltPool(uint256 amount) internal view returns (uint256) {\n    //     if (amount >= cbltLiquidityMaxAmount) {\n    //         return 1;\n    //     } else {\n    //         return 2;\n    //     }\n    // }\n    // // fallback function\n    // receive() external payable {}\n}\n",
  "sourcePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/ChromiumV2.sol",
  "ast": {
    "absolutePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/ChromiumV2.sol",
    "exportedSymbols": {
      "Address": [
        7339
      ],
      "ChromiumV2": [
        3672
      ],
      "ExchangeOracle": [
        4306
      ],
      "IERC20": [
        7408
      ],
      "IUniswap": [
        7737
      ],
      "Ownable": [
        7801
      ],
      "SafeERC20": [
        7937
      ],
      "SafeMath": [
        8164
      ],
      "UniversalERC20": [
        8528
      ]
    },
    "id": 3673,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3665,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:32:1"
      },
      {
        "absolutePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/UniversalERC20.sol",
        "file": "./interfaces/UniversalERC20.sol",
        "id": 3666,
        "nodeType": "ImportDirective",
        "scope": 3673,
        "sourceUnit": 8529,
        "src": "66:41:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/Ownable.sol",
        "file": "./interfaces/Ownable.sol",
        "id": 3667,
        "nodeType": "ImportDirective",
        "scope": 3673,
        "sourceUnit": 7802,
        "src": "108:34:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/IUniswap.sol",
        "file": "./interfaces/IUniswap.sol",
        "id": 3668,
        "nodeType": "ImportDirective",
        "scope": 3673,
        "sourceUnit": 7738,
        "src": "143:35:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/ExchangeOracle.sol",
        "file": "./ExchangeOracle.sol",
        "id": 3669,
        "nodeType": "ImportDirective",
        "scope": 3673,
        "sourceUnit": 4307,
        "src": "179:30:1",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 3670,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 7801,
              "src": "234:7:1",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$7801",
                "typeString": "contract Ownable"
              }
            },
            "id": 3671,
            "nodeType": "InheritanceSpecifier",
            "src": "234:7:1"
          }
        ],
        "contractDependencies": [
          7801
        ],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 3672,
        "linearizedBaseContracts": [
          3672,
          7801
        ],
        "name": "ChromiumV2",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 3673,
        "src": "211:9886:1"
      }
    ],
    "src": "32:10066:1"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/ChromiumV2.sol",
      "exportedSymbols": {
        "Address": [
          7339
        ],
        "ChromiumV2": [
          3672
        ],
        "ExchangeOracle": [
          4306
        ],
        "IERC20": [
          7408
        ],
        "IUniswap": [
          7737
        ],
        "Ownable": [
          7801
        ],
        "SafeERC20": [
          7937
        ],
        "SafeMath": [
          8164
        ],
        "UniversalERC20": [
          8528
        ]
      },
      "license": "MIT"
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            ">=",
            "0.4",
            ".22",
            "<",
            "0.9",
            ".0"
          ]
        },
        "id": 3665,
        "name": "PragmaDirective",
        "src": "32:32:1"
      },
      {
        "attributes": {
          "SourceUnit": 8529,
          "absolutePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/UniversalERC20.sol",
          "file": "./interfaces/UniversalERC20.sol",
          "scope": 3673,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 3666,
        "name": "ImportDirective",
        "src": "66:41:1"
      },
      {
        "attributes": {
          "SourceUnit": 7802,
          "absolutePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/Ownable.sol",
          "file": "./interfaces/Ownable.sol",
          "scope": 3673,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 3667,
        "name": "ImportDirective",
        "src": "108:34:1"
      },
      {
        "attributes": {
          "SourceUnit": 7738,
          "absolutePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/interfaces/IUniswap.sol",
          "file": "./interfaces/IUniswap.sol",
          "scope": 3673,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 3668,
        "name": "ImportDirective",
        "src": "143:35:1"
      },
      {
        "attributes": {
          "SourceUnit": 4307,
          "absolutePath": "/Users/christianroque/Desktop/TungstenGroupProject/contracts/ExchangeOracle.sol",
          "file": "./ExchangeOracle.sol",
          "scope": 3673,
          "symbolAliases": [
            null
          ],
          "unitAlias": ""
        },
        "id": 3669,
        "name": "ImportDirective",
        "src": "179:30:1"
      },
      {
        "attributes": {
          "abstract": false,
          "contractDependencies": [
            7801
          ],
          "contractKind": "contract",
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            3672,
            7801
          ],
          "name": "ChromiumV2",
          "nodes": [
            null
          ],
          "scope": 3673
        },
        "children": [
          {
            "attributes": {},
            "children": [
              {
                "attributes": {
                  "name": "Ownable",
                  "referencedDeclaration": 7801,
                  "type": "contract Ownable"
                },
                "id": 3670,
                "name": "UserDefinedTypeName",
                "src": "234:7:1"
              }
            ],
            "id": 3671,
            "name": "InheritanceSpecifier",
            "src": "234:7:1"
          }
        ],
        "id": 3672,
        "name": "ContractDefinition",
        "src": "211:9886:1"
      }
    ],
    "id": 3673,
    "name": "SourceUnit",
    "src": "32:10066:1"
  },
  "compiler": {
    "name": "solc",
    "version": "0.7.6+commit.7338295f.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.3.4",
  "updatedAt": "2021-06-13T16:48:46.509Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}